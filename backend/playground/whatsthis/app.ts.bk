import _ from 'lodash';
// import bodyParser from 'body-parser';
import path from 'path';
import * as file from '../../src/utils/file';

import { START_DOWNLOAD, DOWNLOAD_SUCCESSFUL, DOWNLOAD_ERROR } from '../../src/utils/messages';

const DOWNLOAD_INTERVAL = 60 * 1000 * (process.env.NODE_ENV === 'production' ? 10 : 1);
// const completed: IVideo[] = file.loadCompleted();

let forked: any = null;
let currentVideo: IVideo | undefined;
// let lastUpdate: Date | null = null;
let shareAvailable = false;

// app.use(express.static(path.join(__dirname, 'public')));

// app.get('/finished', (req, res) => {
//   console.log('GET /finished');
//   res.send(Object.values(completed));
// });

// app.get('/completed', (req, res) => {
//   res.send(completed);
// });

// app.get('/available', async (req, res) => {
//   console.log('GET /available');
//   res.send(store.getState().available.available);
// });

if (process.env.PORT == null || process.env.NODE_ENV == null) {
  console.error('Error in process.env:', process.env);
  process.exit(1);
}

// console.log('video queue: ', Object.keys(videos).length);
// console.log('previously downloaded videos: ', completed.length);

// Start background checks
// getExternalIP(updateExternalIP);
// store.dispatch(fetchAvailable());
// setInterval(() => {
//   getExternalIP(updateExternalIP);
//   // store.dispatch(fetchAvailable());
// }, DOWNLOAD_INTERVAL);
